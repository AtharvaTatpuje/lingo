# -*- coding: utf-8 -*-
"""Stock Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YrM7WCfkztyvBTkX0cFDRCJ-XpoDffYi
"""

# Importing required libraries
import pandas as pd
import pickle
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import yfinance as yf 
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf 
from statsmodels.tsa.arima.model import ARIMA 
from time import time
import datetime
import warnings
import json
import sys

# Suppressing warnings
warnings.filterwarnings('ignore')

# Defining ticker symbol
tickerSymbol = sys.argv[1]
df = yf.Ticker(tickerSymbol)
df

#Define end date, start date, and tomorrow's date
end_date = datetime.datetime.now().date()
start_date = end_date - datetime.timedelta(days=730)
tomorrow = end_date + datetime.timedelta(days=1)

# Fetch historical prices
prices = df.history(start=start_date, end=end_date).Close

# Calculate returns
returns = prices.pct_change().dropna()

# Plotting past stock prices, current price, and future prediction
# plt.figure(figsize=(10,4))
# plt.plot(prices)
# plt.ylabel("Closing prices")
# plt.xlabel("Date")
# plt.title("stock prices")
# plt.figure(figsize=(10,4))
# plt.plot(prices)
# plt.ylabel("Closing prices")
# plt.xlabel("Date")
# plt.title("stock prices")

# plt.figure(figsize=(10,4))
# plt.plot(returns)
# plt.ylabel("Returns")
# plt.xlabel("Date")
# plt.title("Returns of TSLA")

# Building the ARIMA model
model = ARIMA(prices, order=(4, 1, 4))
fitted = model.fit()

# Predicting the next day price
next_day_price = fitted.forecast(steps=1, alpha=0.05)
predicted_price = next_day_price.values[0]


# Define future dates for the predicted prices
future_dates = pd.date_range(start=end_date, periods=1)

# Convert future dates to the appropriate timezone
future_dates = future_dates.tz_localize('UTC').tz_convert('America/New_York')

# Combine past prices, current prices, and future predictions into a single DataFrame
combined_prices = pd.concat([prices, pd.Series(predicted_price, index=future_dates)])


# # Plotting combined prices
# plt.figure(figsize=(10, 6))
# plt.plot(combined_prices, color='red', label='Actual Prices', linestyle='-', linewidth=2)
# plt.plot(prices, color='blue', label='Predicted Prices', linestyle='-', linewidth=2)
# plt.scatter(tomorrow, predicted_price, color='green', label='Predicted Price for Next Day', marker='o', s=100)
# plt.title("Actual vs Predicted Prices for TSLA")
# plt.xlabel("Date")
# plt.ylabel("Price")
# plt.legend()
# plt.grid(True)
# plt.show()

# #Convert the plot to a JSON string
# graph_data = json.dumps({
#   "labels": combined_prices.index.strftime("%Y-%m-%d").tolist(),
#   "prices": combined_prices.tolist()
# })

# Convert the plot to a JSON string
graph_data = json.dumps({
  "labels": combined_prices.index.strftime("%Y-%m-%d").tolist() + [tomorrow.strftime("%Y-%m-%d")],
  "prices": combined_prices.values.tolist() + [predicted_price]
})
# Print the JSON string
print(graph_data)

sys.stdout.flush()


